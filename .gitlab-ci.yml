stages:
  - lint
  - test
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.9"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

# Cache les dépendances pip entre les jobs
cache:
  paths:
    - .pip-cache/
    - venv/

# Vérification de la qualité du code - utilise le runner par défaut
lint:
  stage: lint
  image: python:$PYTHON_VERSION
  script:
    - pip install flake8 black
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - black --check .
  allow_failure: true
  tags:
    - docker
    - linux

# Exécution des tests unitaires - utilise le runner Linux
test:
  stage: test
  image: python:$PYTHON_VERSION
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - pytest --cov=./ --cov-report=xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  tags:
    - linux

# Construire l'application pour Windows - utilise un runner Windows
build-windows:
  stage: build
  script:
    - pip install -r requirements.txt
    - pip install pyinstaller
    - pyinstaller --onefile --windowed --icon=assets/icon.ico --name=NightMod app.py
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
  tags:
    - windows

# Construire l'application pour macOS - utilise un runner macOS
build-macos:
  stage: build
  script:
    - pip install -r requirements.txt
    - pip install pyinstaller
    - pyinstaller --onefile --windowed --icon=assets/icon.ico --name=NightMod app.py
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
  tags:
    - macos

# Construire l'application pour Linux - utilise le runner Linux
build-linux:
  stage: build
  image: python:$PYTHON_VERSION
  script:
    - pip install -r requirements.txt
    - pip install pyinstaller
    - pyinstaller --onefile --windowed --icon=assets/icon.png --name=NightMod app.py
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
  tags:
    - linux

# Déploiement sur GitLab Pages pour la documentation
pages:
  stage: deploy
  image: python:$PYTHON_VERSION
  script:
    - pip install sphinx sphinx_rtd_theme
    - mkdir -p public
    - cd docs && sphinx-build -b html source ../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
  needs:
    - test
  tags:
    - linux

# Créer une release pour les tags
release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release $CI_COMMIT_TAG"
  release:
    name: "Release $CI_COMMIT_TAG"
    description: "Release created using the release-cli"
    tag_name: "$CI_COMMIT_TAG"
    assets:
      links:
        - name: "NightMod-Windows"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/dist/NightMod.exe?job=build-windows"
        - name: "NightMod-Linux"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/dist/NightMod?job=build-linux"
        - name: "NightMod-macOS"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/dist/NightMod?job=build-macos"
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: build-windows
    - job: build-linux
    - job: build-macos
  tags:
    - linux
